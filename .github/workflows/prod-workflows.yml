name: Deploy to AWS EC2 using Docker Hub

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push application Docker image (only if Dockerfile exists)
      - name: Check if Dockerfile exists
        id: dockerfile_check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push application Docker image to Docker Hub
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/korraai:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/korraai:latest

      # Deploy to AWS EC2
      - name: Deploy to AWS EC2
        run: |
          # Install sshpass if not available
          sudo apt-get update
          sudo apt-get install -y sshpass

          # Create deployment script with substituted values
          cat > deploy-remote.sh << 'SCRIPT'
          #!/bin/bash
          set -e

          # Navigate to home directory
          cd ~

          echo "Starting deployment..."
          echo "Current directory: $(pwd)"
          echo "Current user: $(whoami)"

          # Create .env file with the actual values
          cat > .env << ENVFILE
DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
ENVFILE

          echo "Created .env file with environment variables"
          
          # Export variables for this session
          export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          
          # Check if we're root
          if [ "$(id -u)" -eq 0 ]; then
            echo "Running as root - no sudo needed"
            
            # Ensure Docker is running
            systemctl start docker || true
            
            # Pull the latest application image
            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/korraai:latest || {
              echo "Error: Failed to pull image"
              exit 1
            }

            # Stop and remove existing containers
            echo "Stopping existing containers..."
            docker-compose down --remove-orphans || true

            # Start services with docker-compose
            echo "Starting services..."
            docker-compose up -d

            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 20

            # Check container status
            echo "Container status:"
            docker ps -a

            # Show logs if containers are running
            if docker ps | grep -q korra-ai; then
              echo "Application logs:"
              docker-compose logs app --tail=30
            fi

            if docker ps | grep -q django_postgres_pgvector; then
              echo "Database logs:"
              docker-compose logs db --tail=10
            fi

            # Clean up unused Docker images
            docker image prune -f
            
          else
            echo "Not running as root - using sudo"
            
            # Ensure Docker is running
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S systemctl start docker || true
            
            # Pull the latest application image
            echo "Pulling latest image..."
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S docker pull ${{ secrets.DOCKER_USERNAME }}/korraai:latest || {
              echo "Error: Failed to pull image"
              exit 1
            }

            # Stop and remove existing containers
            echo "Stopping existing containers..."
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S docker-compose down --remove-orphans || true

            # Start services with docker-compose
            echo "Starting services..."
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S -E docker-compose up -d

            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 20

            # Check container status
            echo "Container status:"
            echo "${{ secrets.EC2_PASSWORD