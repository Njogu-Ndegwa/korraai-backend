name: Deploy to AWS EC2 using Docker Hub

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push application Docker image (only if Dockerfile exists)
    - name: Check if Dockerfile exists
      id: dockerfile_check
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and push application Docker image to Docker Hub
      if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/korraai:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/korraai:latest

    # Deploy to AWS EC2
    - name: Deploy to AWS EC2
      run: |
        # Install sshpass if not available
        sudo apt-get update
        sudo apt-get install -y sshpass

        # Copy docker-compose file to EC2
        sshpass -p "${{ secrets.EC2_PASSWORD }}" scp -o StrictHostKeyChecking=no \
          docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:~/

        # SSH into EC2 and deploy
        sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} \
          "export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} && bash -s" << 'EOF'

          # Navigate to home directory where docker-compose.yml was copied
          cd ~

          echo "Starting deployment..."
          echo "Current directory: $(pwd)"
          echo "Current user: $(whoami)"
          echo "User ID: $(id)"
          echo "DOCKER_USERNAME: ${DOCKER_USERNAME}"
          
          # Check if we're root - if so, no sudo needed
          if [ "$(id -u)" -eq 0 ]; then
            echo "Running as root - no sudo needed"
            
            # Check Docker daemon status
            echo "Checking Docker daemon..."
            systemctl status docker --no-pager -l
            systemctl start docker
            
            # Pull the latest application image
            echo "Pulling latest image..."
            docker pull ${DOCKER_USERNAME}/korraai:latest || echo "Warning: Could not pull latest image"

            # Stop existing containers
            echo "Stopping existing containers..."
            DOCKER_USERNAME=${DOCKER_USERNAME} docker-compose down || true

            # Start services with docker-compose
            echo "Starting services..."
            DOCKER_USERNAME=${DOCKER_USERNAME} docker-compose up -d

            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 15

            # Check container status
            echo "Container status:"
            docker ps -a

            # Show logs
            echo "Application logs:"
            DOCKER_USERNAME=${DOCKER_USERNAME} docker-compose logs app --tail=20

            echo "Database logs:"
            DOCKER_USERNAME=${DOCKER_USERNAME} docker-compose logs db --tail=10

            # Clean up unused Docker images
            docker image prune -f
            
          else
            echo "Not running as root - using sudo"
            
            # Check Docker daemon status
            echo "Checking Docker daemon..."
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S systemctl status docker --no-pager -l
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S systemctl start docker
            
            # Pull the latest application image
            echo "Pulling latest image..."
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S docker pull ${DOCKER_USERNAME}/korraai:latest || echo "Warning: Could not pull latest image"

            # Stop existing containers
            echo "Stopping existing containers..."
            echo "${{ secrets.EC2_PASSWORD }}" | DOCKER_USERNAME=${DOCKER_USERNAME} sudo -S docker-compose down || true

            # Start services with docker-compose
            echo "Starting services..."
            echo "${{ secrets.EC2_PASSWORD }}" | DOCKER_USERNAME=${DOCKER_USERNAME} sudo -S docker-compose up -d

            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 15

            # Check container status
            echo "Container status:"
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S docker ps -a

            # Show logs
            echo "Application logs:"
            echo "${{ secrets.EC2_PASSWORD }}" | DOCKER_USERNAME=${DOCKER_USERNAME} sudo -S docker-compose logs app --tail=20

            echo "Database logs:"
            echo "${{ secrets.EC2_PASSWORD }}" | DOCKER_USERNAME=${DOCKER_USERNAME} sudo -S docker-compose logs db --tail=10

            # Clean up unused Docker images
            echo "${{ secrets.EC2_PASSWORD }}" | sudo -S docker image prune -f
          fi

          echo "Deployment completed!"
        EOF